@page "/calculator"

@inject CalculatorService calculatorService
@inject IJSRuntime js

<div class="calculator-container" tabindex="0" @onkeydown="HandleKeyPress">
    <div class="calculator-display">
        @calculatorService.DisplayValue
    </div>

    <div class="row calculator-row">
        <div class="col-6">
            <button class="calculator-button" @onclick="@(() => calculatorService.Clear())">C</button>
        </div>
        <div class="col-3">
            <button class="calculator-button" @onclick="@(() => calculatorService.DeleteLastCharacter())">←</button>
        </div>
        <div class="col-3">
            <button class="calculator-button operation" @onclick="@(() => calculatorService.SetOperation("/"))">÷</button>
        </div>
    </div>

    <div class="row calculator-row">
        <div class="col-3">
            <button class="calculator-button" @onclick="@(() => calculatorService.InputDigit("7"))">7</button>
        </div>
        <div class="col-3">
            <button class="calculator-button" @onclick="@(() => calculatorService.InputDigit("8"))">8</button>
        </div>
        <div class="col-3">
            <button class="calculator-button" @onclick="@(() => calculatorService.InputDigit("9"))">9</button>
        </div>
        <div class="col-3">
            <button class="calculator-button operation" @onclick="@(() => calculatorService.SetOperation("*"))">×</button>
        </div>
    </div>

    <div class="row calculator-row">
        <div class="col-3">
            <button class="calculator-button" @onclick="@(() => calculatorService.InputDigit("4"))">4</button>
        </div>
        <div class="col-3">
            <button class="calculator-button" @onclick="@(() => calculatorService.InputDigit("5"))">5</button>
        </div>
        <div class="col-3">
            <button class="calculator-button" @onclick="@(() => calculatorService.InputDigit("6"))">6</button>
        </div>
        <div class="col-3">
            <button class="calculator-button operation" @onclick="@(() => calculatorService.SetOperation("-"))">−</button>
        </div>
    </div>

    <div class="row calculator-row">
        <div class="col-3">
            <button class="calculator-button" @onclick="@(() => calculatorService.InputDigit("1"))">1</button>
        </div>
        <div class="col-3">
            <button class="calculator-button" @onclick="@(() => calculatorService.InputDigit("2"))">2</button>
        </div>
        <div class="col-3">
            <button class="calculator-button" @onclick="@(() => calculatorService.InputDigit("3"))">3</button>
        </div>
        <div class="col-3">
            <button class="calculator-button operation" @onclick="@(() => calculatorService.SetOperation("+"))">+</button>
        </div>
    </div>

    <div class="row calculator-row">
        <div class="col-6">
            <button class="calculator-button" @onclick="@(() => calculatorService.InputDigit("0"))">0</button>
        </div>
        <div class="col-3">
            <button class="calculator-button" @onclick="@(() => calculatorService.InputDecimal())">.</button>
        </div>
        <div class="col-3">
            <button class="calculator-button equal" @onclick="@(() => calculatorService.CalculateResult())">=</button>
        </div>
    </div>
</div>

@code {
    private void HandleKeyPress(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Enter":
                calculatorService.CalculateResult();
                break;
            case "Backspace":
                calculatorService.DeleteLastCharacter();
                break;
            case "Escape":
                calculatorService.Clear();
                break;
            case string key when char.IsDigit(key[0]):
                calculatorService.InputDigit(e.Key);
                break;
            case ".":
                calculatorService.InputDecimal();
                break;
            case "/":
            case "*":
            case "-":
            case "+":
                calculatorService.SetOperation(e.Key);
                break;
        }
    }

    private async Task BlurButton()
    {
        await js.InvokeVoidAsync("document.activeElement.blur");
    }
}